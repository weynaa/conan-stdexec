from conan import ConanFile
from conan.tools.build.cppstd import check_min_cppstd
from conan.tools.cmake import CMake, cmake_layout
from conan.tools.files import copy
from conan.tools.scm import Git

import os

class StdexecPackage(ConanFile):
  name = "stdexec"
  description = "std::execution"
  author = "Micha≈Ç Dominiak, Lewis Baker, Lee Howes, Kirk Shoop, Michael Garland, Eric Niebler, Bryce Adelstein Lelbach"
  topics = ("WG21", "concurrency")
  homepage = "https://github.com/NVIDIA/stdexec"
  url = "https://github.com/NVIDIA/stdexec"
  license = "Apache 2.0"

  settings = "os", "arch", "compiler", "build_type"

  generators = "CMakeToolchain"

  def validate(self):
    check_min_cppstd(self, "20")

  def layout(self):
    cmake_layout(self)

  def source(self):
    git = Git(self)
    git.clone(url=self.conan_data[self.version]["url"], target=".")
    git.checkout(commit=self.conan_data[self.version]["commit"])

  def build(self):
    tests = "OFF" if self.conf.get("tools.build:skip_test", default=False) else "ON"

    cmake = CMake(self)
    cmake.configure(variables={
      "STDEXEC_BUILD_TESTS": tests
    })
    cmake.build()
    cmake.test()

  def package_id(self):
    # Clear settings because this package is header-only.
    self.info.clear()

  def package(self):
    cmake = CMake(self)
    cmake.install()
  
  def package_info(self):
    # Disable the config package that would otherwise be generated by CMakeDeps
    self.cpp_info.set_property("cmake_find_mode", "none")
    self.cpp_info.set_property("cmake_target_name", "STDEXEC::stdexec")

    if self.folders.build_folder:
        # Find the CMake-generated config when using this repository from its build-tree
        # (notably useful with `conan workspace`)
        self.cpp_info.builddirs.append(self.folders.build_folder)
    else:
        # Find the CMake-generated config when consuming the (installed) Conan package.
        self.cpp_info.builddirs.append(os.path.join('lib', 'cmake'))
